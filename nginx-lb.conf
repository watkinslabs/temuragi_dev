events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:5000;
    }

    upstream web {
        server web:80;
    }

    upstream pgadmin {
        server pgadmin:80;
    }

    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        server_name temuragi.local;
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name temuragi.local;

        ssl_certificate /etc/nginx/ssl/temuragi.local.crt;
        ssl_certificate_key /etc/nginx/ssl/temuragi.local.key;

        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # pgAdmin route - MUST come before catch-all
        location /pg_admin {
            proxy_pass http://pgadmin;
            proxy_set_header X-Script-Name /pg_admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Backend API routes
        location = / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /v2 {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static web content (catch-all) - MUST be last
        location / {
            proxy_pass http://web;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}